#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use File::Basename;
my $VERSION = "0.1";
my %options = (
help => 0,
debug => 0,
verbose => 0,
insecure => 0,
file => [],
# identical token maps, e.g. host -> host, will be inserted later
tmap =>
);
# Map each credential protocol token to itself on the netrc side.
foreach (values %)
# Now, $options has a mapping from the netrc format to the Git credential
# helper protocol.
# Next, we build the reverse token map.
# When $rmap contains 'bar', that means that what the Git credential helper
# protocol calls 'bar' is found as 'foo' in the netrc/authinfo file.  Keys in
# %rmap are what we expect to read from the netrc/authinfo file.
my %rmap;
foreach my $k (keys %)
Getopt::Long::Configure("bundling");
# TODO: maybe allow the token map $options to be configurable.
GetOptions(\%options,
"help|h",
"debug|d",
"insecure|k",
"verbose|v",
"file|f=s@",
);
if ($options)
my $mode = shift @ARGV;
# Credentials must get a parameter, so die if it's missing.
die "Syntax: $0 [-f AUTHFILE1] [-f AUTHFILEN] [-d] get" unless defined $mode;
# Only support 'get' mode; with any other unsupported ones we just exit.
exit 0 unless $mode eq 'get';
my $files = $options;
# if no files were given, use a predefined list.
# note that .gpg files come first
unless (scalar @$files)
my $query = read_credential_data_from_stdin();
FILE:
foreach my $file (@$files)
exit 0;
sub load_netrc
sub net_netrc_loader
return @entries;
}
sub read_credential_data_from_stdin
# takes the search tokens and then a list of entries
# each entry is a hash reference
sub find_netrc_entry
sub print_credential_data
sub log_verbose
sub log_debug
