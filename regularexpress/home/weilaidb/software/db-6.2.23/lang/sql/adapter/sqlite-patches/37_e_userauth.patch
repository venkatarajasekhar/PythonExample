--- Makefile.in
+++ Makefile.in
@@ -28,9 +28,16 @@
# are provide so that these aspects of the build process can be changed
# on the "make" command-line.  Ex:  "make CC=clang CFLAGS=-fsanitize=undefined"
#
+# When building BDB SQL, the current build folder(-I.) is where we build the
+# BDB library. e.g., build_unix or build_windows. Some BDB header files like
+# db.h or db_int.h are found there.
+# We also add BDB src/ folder(-I$/../../../src) into the search path.
+# This is where BDB internal header files are found. For example, dbinc/crypto.h.
+#
CC = @CC@
CFLAGS = @CPPFLAGS@ @CFLAGS@
-TCC = $(CC) $(CFLAGS) -I. -I$/src -I$/../adapter -I$/ext/fts3 -I$/ext/rtree -I$/ext/fts3
+TCC = $(CC) $(CFLAGS) -I. -I$/src -I$/../adapter -I$/../../../src \
+	-I$/ext/fts3 -I$/ext/rtree -I$/ext/fts3 -I$/ext/userauth
# Define this for the autoconf-based build, so that the code knows it can
# include the generated config.h
@@ -182,7 +189,7 @@
pager.lo parse.lo pcache.lo pcache1.lo pragma.lo prepare.lo printf.lo \
random.lo resolve.lo rowset.lo rtree.lo select.lo status.lo \
table.lo threads.lo tokenize.lo trigger.lo \
-         update.lo util.lo vacuum.lo \
+         userauth.lo update.lo util.lo vacuum.lo \
vdbe.lo vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \
vdbetrace.lo wal.lo walker.lo where.lo utf.lo vtab.lo
@@ -343,7 +350,10 @@
SRC += \
$(TOP)/ext/rtree/rtree.h \
$(TOP)/ext/rtree/rtree.c
-
+SRC += \
+  $(TOP)/ext/userauth/sqlite3userauth.h \
+  $(TOP)/../adapter/userauth.h \
+  $(TOP)/../adapter/userauth.c
# Generated source code files
#
@@ -513,6 +523,9 @@
$(TOP)/ext/icu/sqliteicu.h
EXTHDR += \
$(TOP)/ext/rtree/sqlite3rtree.h
+EXTHDR += \
+  $(TOP)/ext/userauth/sqlite3userauth.h \
+  $(TOP)/../adapter/userauth.h
# This is the default Makefile target.  The objects listed here
# are what get build when you type just "make" with no arguments.
@@ -953,6 +966,9 @@
rtree.lo:	$(TOP)/ext/rtree/rtree.c $(HDR) $(EXTHDR)
$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/rtree/rtree.c
+userauth.lo:	$(TOP)/../adapter/userauth.c $(HDR) $(EXTHDR)
+	$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/../adapter/userauth.c
+
# Rules to build the 'testfixture' application.
#
--- tool/mksqlite3c.tcl
+++ tool/mksqlite3c.tcl
@@ -113,9 +113,11 @@
rtree.h
sqlite3ext.h
sqlite3.h
+   sqlite3userauth.h
sqliteicu.h
sqliteInt.h
sqliteLimit.h
+   userauth.h
vdbe.h
vdbeInt.h
vxworks.h
@@ -373,6 +375,7 @@
icu.c
fts3_icu.c
dbstat.c
+   userauth.c
}
--- tool/mksqlite3h.tcl
+++ tool/mksqlite3h.tcl
@@ -71,6 +71,7 @@
set filelist [subst ]
# These are the functions that accept a variable number of arguments.  They
--- src/test1.c
+++ src/test1.c
@@ -6498,7 +6498,6 @@
-
--- src/shell.c
+++ src/shell.c
@@ -61,9 +61,6 @@
-#if SQLITE_USER_AUTHENTICATION
-# include "sqlite3userauth.h"
-
--- ext/userauth/sqlite3userauth.h
+++ ext/userauth/sqlite3userauth.h
@@ -19,7 +19,26 @@
** user-auth.txt file in the same source directory as this file for
** additional information.
*/
+
+#define _SQLITE3USERAUTH_H_
+
+#undef SQLITE_USER_AUTHENTICATION
+
+
+#if defined(BDBSQL_USER_AUTHENTICATION) || \
+	defined(BDBSQL_USER_AUTHENTICATION_KEYSTORE)
+#define SQLITE_USER_AUTHENTICATION 1
+
+
+#if defined(BDBSQL_USER_AUTHENTICATION_KEYSTORE) && !defined(SQLITE_HAS_CODEC)
+#undef BDBSQL_USER_AUTHENTICATION_KEYSTORE
+
+
+
+
);
+
+
+
+
--- src/test_config.c
+++ src/test_config.c
@@ -621,6 +621,12 @@
Tcl_SetVar2(interp, "sqlite_options", "userauth", "0", TCL_GLOBAL_ONLY);
+
+  Tcl_SetVar2(interp, "sqlite_options", "userauth_keystore", "1", TCL_GLOBAL_ONLY);
+
+  Tcl_SetVar2(interp, "sqlite_options", "userauth_keystore", "0", TCL_GLOBAL_ONLY);
+
+
Tcl_SetVar2(interp, "sqlite_options", "multiplex_ext_overwrite", "1", TCL_GLOBAL_ONLY);
--- test/userauth01.test
+++ test/userauth01.test
@@ -207,7 +207,7 @@
# check fails, then the ATTACH command fails with an SQLITE_AUTH error.
#
do_test userauth01-1.60
--- src/sqliteInt.h
+++ src/sqliteInt.h
@@ -567,20 +567,39 @@
#  define INT8_TYPE signed char
# endif
# define LONGDOUBLE_TYPE long double
typedef sqlite_int64 i64;
typedef sqlite_uint64 u64;
+
+
+
typedef UINT32_TYPE u32;
+#define U32_TYPE_DEFINED
+
+
+
typedef UINT16_TYPE u16;
+#define U16_TYPE_DEFINED
+
+
typedef INT16_TYPE i16;
+
+
typedef UINT8_TYPE u8;
+#define U8_TYPE_DEFINED
+
+
typedef INT8_TYPE i8;
