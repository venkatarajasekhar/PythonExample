#define _ASM_M32R_ATOMIC_H
#define ATOMIC_INIT(i)
#define atomic_read(v)	(*(volatile int *)&(v)->counter)
#define atomic_set(v,i)	(((v)->counter) = (i))
static __inline__ int atomic_add_return(int i, atomic_t *v)
static __inline__ int atomic_sub_return(int i, atomic_t *v)
#define atomic_add(i,v) ((void) atomic_add_return((i), (v)))
#define atomic_sub(i,v) ((void) atomic_sub_return((i), (v)))
#define atomic_sub_and_test(i,v) (atomic_sub_return((i), (v)) == 0)
static __inline__ int atomic_inc_return(atomic_t *v)
static __inline__ int atomic_dec_return(atomic_t *v)
#define atomic_inc(v) ((void)atomic_inc_return(v))
#define atomic_dec(v) ((void)atomic_dec_return(v))
#define atomic_inc_and_test(v) (atomic_inc_return(v) == 0)
#define atomic_dec_and_test(v) (atomic_dec_return(v) == 0)
#define atomic_add_negative(i,v) (atomic_add_return((i), (v)) < 0)
#define atomic_cmpxchg(v, o, n) ((int)cmpxchg(&((v)->counter), (o), (n)))
#define atomic_xchg(v, new) (xchg(&((v)->counter), new))
static __inline__ int atomic_add_unless(atomic_t *v, int a, int u)
#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)
static __inline__ void atomic_clear_mask(unsigned long  mask, atomic_t *addr)
static __inline__ void atomic_set_mask(unsigned long  mask, atomic_t *addr)
#define smp_mb__before_atomic_dec()	barrier()
#define smp_mb__after_atomic_dec()	barrier()
#define smp_mb__before_atomic_inc()	barrier()
#define smp_mb__after_atomic_inc()	barrier()
