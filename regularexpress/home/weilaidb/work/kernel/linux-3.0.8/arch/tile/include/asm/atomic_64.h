#define _ASM_TILE_ATOMIC_64_H
#define atomic_set(v, i) ((v)->counter = (i))
static inline int atomic_cmpxchg(atomic_t *v, int o, int n)
static inline int atomic_xchg(atomic_t *v, int n)
static inline void atomic_add(int i, atomic_t *v)
static inline int atomic_add_return(int i, atomic_t *v)
static inline int atomic_add_unless(atomic_t *v, int a, int u)
#define ATOMIC64_INIT(i)
#define atomic64_read(v)		((v)->counter)
#define atomic64_set(v, i) ((v)->counter = (i))
static inline long atomic64_cmpxchg(atomic64_t *v, long o, long n)
static inline long atomic64_xchg(atomic64_t *v, long n)
static inline void atomic64_add(long i, atomic64_t *v)
static inline long atomic64_add_return(long i, atomic64_t *v)
static inline long atomic64_add_unless(atomic64_t *v, long a, long u)
#define atomic64_sub_return(i, v)	atomic64_add_return(-(i), (v))
#define atomic64_sub(i, v)		atomic64_add(-(i), (v))
#define atomic64_inc_return(v)		atomic64_add_return(1, (v))
#define atomic64_dec_return(v)		atomic64_sub_return(1, (v))
#define atomic64_inc(v)			atomic64_add(1, (v))
#define atomic64_dec(v)			atomic64_sub(1, (v))
#define atomic64_inc_and_test(v)	(atomic64_inc_return(v) == 0)
#define atomic64_dec_and_test(v)	(atomic64_dec_return(v) == 0)
#define atomic64_sub_and_test(i, v)	(atomic64_sub_return((i), (v)) == 0)
#define atomic64_add_negative(i, v)	(atomic64_add_return((i), (v)) < 0)
#define atomic64_inc_not_zero(v)	atomic64_add_unless((v), 1, 0)
#define smp_mb__before_atomic_dec()	smp_mb()
#define smp_mb__after_atomic_dec()	smp_mb()
#define smp_mb__before_atomic_inc()	smp_mb()
#define smp_mb__after_atomic_inc()	smp_mb()
#define __HAVE_ARCH_CMPXCHG
