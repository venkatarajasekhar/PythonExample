#define __ASM_CRIS_ATOMIC__
#define ATOMIC_INIT(i)
#define atomic_read(v) (*(volatile int *)&(v)->counter)
#define atomic_set(v,i) (((v)->counter) = (i))
static inline void atomic_add(int i, volatile atomic_t *v)
static inline void atomic_sub(int i, volatile atomic_t *v)
static inline int atomic_add_return(int i, volatile atomic_t *v)
#define atomic_add_negative(a, v)	(atomic_add_return((a), (v)) < 0)
static inline int atomic_sub_return(int i, volatile atomic_t *v)
static inline int atomic_sub_and_test(int i, volatile atomic_t *v)
static inline void atomic_inc(volatile atomic_t *v)
static inline void atomic_dec(volatile atomic_t *v)
static inline int atomic_inc_return(volatile atomic_t *v)
static inline int atomic_dec_return(volatile atomic_t *v)
static inline int atomic_dec_and_test(volatile atomic_t *v)
static inline int atomic_inc_and_test(volatile atomic_t *v)
static inline int atomic_cmpxchg(atomic_t *v, int old, int new)
#define atomic_xchg(v, new) (xchg(&((v)->counter), new))
static inline int atomic_add_unless(atomic_t *v, int a, int u)
#define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)
#define smp_mb__before_atomic_dec()    barrier()
#define smp_mb__after_atomic_dec()     barrier()
#define smp_mb__before_atomic_inc()    barrier()
#define smp_mb__after_atomic_inc()     barrier()
