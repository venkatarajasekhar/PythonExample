#define __HCI_H
#define HCI_MAX_ACL_SIZE	1024
#define HCI_MAX_SCO_SIZE	255
#define HCI_MAX_EVENT_SIZE	260
#define HCI_MAX_FRAME_SIZE	(HCI_MAX_ACL_SIZE + 4)
#define HCI_DEV_REG			1
#define HCI_DEV_UNREG			2
#define HCI_DEV_UP			3
#define HCI_DEV_DOWN			4
#define HCI_DEV_SUSPEND			5
#define HCI_DEV_RESUME			6
#define HCI_NOTIFY_CONN_ADD		1
#define HCI_NOTIFY_CONN_DEL		2
#define HCI_NOTIFY_VOICE_SETTING	3
#define HCI_VIRTUAL	0
#define HCI_USB		1
#define HCI_PCCARD	2
#define HCI_UART	3
#define HCI_RS232	4
#define HCI_PCI		5
#define HCI_SDIO	6
#define HCI_BREDR	0x00
#define HCI_AMP		0x01
enum ;
enum ;
#define HCIDEVUP	_IOW('H', 201, int)
#define HCIDEVDOWN	_IOW('H', 202, int)
#define HCIDEVRESET	_IOW('H', 203, int)
#define HCIDEVRESTAT	_IOW('H', 204, int)
#define HCIGETDEVLIST	_IOR('H', 210, int)
#define HCIGETDEVINFO	_IOR('H', 211, int)
#define HCIGETCONNLIST	_IOR('H', 212, int)
#define HCIGETCONNINFO	_IOR('H', 213, int)
#define HCIGETAUTHINFO	_IOR('H', 215, int)
#define HCISETRAW	_IOW('H', 220, int)
#define HCISETSCAN	_IOW('H', 221, int)
#define HCISETAUTH	_IOW('H', 222, int)
#define HCISETENCRYPT	_IOW('H', 223, int)
#define HCISETPTYPE	_IOW('H', 224, int)
#define HCISETLINKPOL	_IOW('H', 225, int)
#define HCISETLINKMODE	_IOW('H', 226, int)
#define HCISETACLMTU	_IOW('H', 227, int)
#define HCISETSCOMTU	_IOW('H', 228, int)
#define HCIBLOCKADDR	_IOW('H', 230, int)
#define HCIUNBLOCKADDR	_IOW('H', 231, int)
#define HCIINQUIRY	_IOR('H', 240, int)
#define HCI_CONNECT_TIMEOUT	(40000)
#define HCI_DISCONN_TIMEOUT	(2000)
#define HCI_PAIRING_TIMEOUT	(60000)
#define HCI_IDLE_TIMEOUT	(6000)
#define HCI_INIT_TIMEOUT	(10000)
#define HCI_CMD_TIMEOUT		(1000)
#define HCI_COMMAND_PKT		0x01
#define HCI_ACLDATA_PKT		0x02
#define HCI_SCODATA_PKT		0x03
#define HCI_EVENT_PKT		0x04
#define HCI_VENDOR_PKT		0xff
#define HCI_DM1		0x0008
#define HCI_DM3		0x0400
#define HCI_DM5		0x4000
#define HCI_DH1		0x0010
#define HCI_DH3		0x0800
#define HCI_DH5		0x8000
#define HCI_HV1		0x0020
#define HCI_HV2		0x0040
#define HCI_HV3		0x0080
#define SCO_PTYPE_MASK	(HCI_HV1 | HCI_HV2 | HCI_HV3)
#define ACL_PTYPE_MASK	(~SCO_PTYPE_MASK)
#define ESCO_HV1	0x0001
#define ESCO_HV2	0x0002
#define ESCO_HV3	0x0004
#define ESCO_EV3	0x0008
#define ESCO_EV4	0x0010
#define ESCO_EV5	0x0020
#define ESCO_2EV3	0x0040
#define ESCO_3EV3	0x0080
#define ESCO_2EV5	0x0100
#define ESCO_3EV5	0x0200
#define SCO_ESCO_MASK  (ESCO_HV1 | ESCO_HV2 | ESCO_HV3)
#define EDR_ESCO_MASK  (ESCO_2EV3 | ESCO_3EV3 | ESCO_2EV5 | ESCO_3EV5)
#define ACL_START_NO_FLUSH	0x00
#define ACL_CONT		0x01
#define ACL_START		0x02
#define ACL_ACTIVE_BCAST	0x04
#define ACL_PICO_BCAST		0x08
#define SCO_LINK	0x00
#define ACL_LINK	0x01
#define ESCO_LINK	0x02
#define LE_LINK		0x80
#define LMP_3SLOT	0x01
#define LMP_5SLOT	0x02
#define LMP_ENCRYPT	0x04
#define LMP_SOFFSET	0x08
#define LMP_TACCURACY	0x10
#define LMP_RSWITCH	0x20
#define LMP_HOLD	0x40
#define LMP_SNIFF	0x80
#define LMP_PARK	0x01
#define LMP_RSSI	0x02
#define LMP_QUALITY	0x04
#define LMP_SCO		0x08
#define LMP_HV2		0x10
#define LMP_HV3		0x20
#define LMP_ULAW	0x40
#define LMP_ALAW	0x80
#define LMP_CVSD	0x01
#define LMP_PSCHEME	0x02
#define LMP_PCONTROL	0x04
#define LMP_RSSI_INQ	0x40
#define LMP_ESCO	0x80
#define LMP_EV4		0x01
#define LMP_EV5		0x02
#define LMP_LE		0x40
#define LMP_SNIFF_SUBR	0x02
#define LMP_PAUSE_ENC	0x04
#define LMP_EDR_ESCO_2M	0x20
#define LMP_EDR_ESCO_3M	0x40
#define LMP_EDR_3S_ESCO	0x80
#define LMP_EXT_INQ	0x01
#define LMP_SIMPLE_PAIR	0x08
#define LMP_NO_FLUSH	0x40
#define LMP_LSTO	0x01
#define LMP_INQ_TX_PWR	0x02
#define HCI_CM_ACTIVE	0x0000
#define HCI_CM_HOLD	0x0001
#define HCI_CM_SNIFF	0x0002
#define HCI_CM_PARK	0x0003
#define HCI_LP_RSWITCH	0x0001
#define HCI_LP_HOLD	0x0002
#define HCI_LP_SNIFF	0x0004
#define HCI_LP_PARK	0x0008
#define HCI_LM_ACCEPT	0x8000
#define HCI_LM_MASTER	0x0001
#define HCI_LM_AUTH	0x0002
#define HCI_LM_ENCRYPT	0x0004
#define HCI_LM_TRUSTED	0x0008
#define HCI_LM_RELIABLE	0x0010
#define HCI_LM_SECURE	0x0020
#define HCI_AT_NO_BONDING		0x00
#define HCI_AT_NO_BONDING_MITM		0x01
#define HCI_AT_DEDICATED_BONDING	0x02
#define HCI_AT_DEDICATED_BONDING_MITM	0x03
#define HCI_AT_GENERAL_BONDING		0x04
#define HCI_AT_GENERAL_BONDING_MITM	0x05
#define HCI_LK_COMBINATION		0x00
#define HCI_LK_LOCAL_UNIT		0x01
#define HCI_LK_REMOTE_UNIT		0x02
#define HCI_LK_DEBUG_COMBINATION	0x03
#define HCI_LK_UNAUTH_COMBINATION	0x04
#define HCI_LK_AUTH_COMBINATION		0x05
#define HCI_LK_CHANGED_COMBINATION	0x06
#define HCI_OP_NOP			0x0000
#define HCI_OP_INQUIRY			0x0401
struct hci_cp_inquiry  __packed;
#define HCI_OP_INQUIRY_CANCEL		0x0402
#define HCI_OP_EXIT_PERIODIC_INQ	0x0404
#define HCI_OP_CREATE_CONN		0x0405
struct hci_cp_create_conn  __packed;
#define HCI_OP_DISCONNECT		0x0406
struct hci_cp_disconnect  __packed;
#define HCI_OP_ADD_SCO			0x0407
struct hci_cp_add_sco  __packed;
#define HCI_OP_CREATE_CONN_CANCEL	0x0408
struct hci_cp_create_conn_cancel  __packed;
#define HCI_OP_ACCEPT_CONN_REQ		0x0409
struct hci_cp_accept_conn_req  __packed;
#define HCI_OP_REJECT_CONN_REQ		0x040a
struct hci_cp_reject_conn_req  __packed;
#define HCI_OP_LINK_KEY_REPLY		0x040b
struct hci_cp_link_key_reply  __packed;
#define HCI_OP_LINK_KEY_NEG_REPLY	0x040c
struct hci_cp_link_key_neg_reply  __packed;
#define HCI_OP_PIN_CODE_REPLY		0x040d
struct hci_cp_pin_code_reply  __packed;
struct hci_rp_pin_code_reply  __packed;
#define HCI_OP_PIN_CODE_NEG_REPLY	0x040e
struct hci_cp_pin_code_neg_reply  __packed;
struct hci_rp_pin_code_neg_reply  __packed;
#define HCI_OP_CHANGE_CONN_PTYPE	0x040f
struct hci_cp_change_conn_ptype  __packed;
#define HCI_OP_AUTH_REQUESTED		0x0411
struct hci_cp_auth_requested  __packed;
#define HCI_OP_SET_CONN_ENCRYPT		0x0413
struct hci_cp_set_conn_encrypt  __packed;
#define HCI_OP_CHANGE_CONN_LINK_KEY	0x0415
struct hci_cp_change_conn_link_key  __packed;
#define HCI_OP_REMOTE_NAME_REQ		0x0419
struct hci_cp_remote_name_req  __packed;
#define HCI_OP_REMOTE_NAME_REQ_CANCEL	0x041a
struct hci_cp_remote_name_req_cancel  __packed;
#define HCI_OP_READ_REMOTE_FEATURES	0x041b
struct hci_cp_read_remote_features  __packed;
#define HCI_OP_READ_REMOTE_EXT_FEATURES	0x041c
struct hci_cp_read_remote_ext_features  __packed;
#define HCI_OP_READ_REMOTE_VERSION	0x041d
struct hci_cp_read_remote_version  __packed;
#define HCI_OP_SETUP_SYNC_CONN		0x0428
struct hci_cp_setup_sync_conn  __packed;
#define HCI_OP_ACCEPT_SYNC_CONN_REQ	0x0429
struct hci_cp_accept_sync_conn_req  __packed;
#define HCI_OP_REJECT_SYNC_CONN_REQ	0x042a
struct hci_cp_reject_sync_conn_req  __packed;
#define HCI_OP_IO_CAPABILITY_REPLY	0x042b
struct hci_cp_io_capability_reply  __packed;
#define HCI_OP_USER_CONFIRM_REPLY		0x042c
struct hci_cp_user_confirm_reply  __packed;
struct hci_rp_user_confirm_reply  __packed;
#define HCI_OP_USER_CONFIRM_NEG_REPLY	0x042d
#define HCI_OP_REMOTE_OOB_DATA_REPLY	0x0430
struct hci_cp_remote_oob_data_reply  __packed;
#define HCI_OP_REMOTE_OOB_DATA_NEG_REPLY	0x0433
struct hci_cp_remote_oob_data_neg_reply  __packed;
#define HCI_OP_IO_CAPABILITY_NEG_REPLY	0x0434
struct hci_cp_io_capability_neg_reply  __packed;
#define HCI_OP_SNIFF_MODE		0x0803
struct hci_cp_sniff_mode  __packed;
#define HCI_OP_EXIT_SNIFF_MODE		0x0804
struct hci_cp_exit_sniff_mode  __packed;
#define HCI_OP_ROLE_DISCOVERY		0x0809
struct hci_cp_role_discovery  __packed;
struct hci_rp_role_discovery  __packed;
#define HCI_OP_SWITCH_ROLE		0x080b
struct hci_cp_switch_role  __packed;
#define HCI_OP_READ_LINK_POLICY		0x080c
struct hci_cp_read_link_policy  __packed;
struct hci_rp_read_link_policy  __packed;
#define HCI_OP_WRITE_LINK_POLICY	0x080d
struct hci_cp_write_link_policy  __packed;
struct hci_rp_write_link_policy  __packed;
#define HCI_OP_READ_DEF_LINK_POLICY	0x080e
struct hci_rp_read_def_link_policy  __packed;
#define HCI_OP_WRITE_DEF_LINK_POLICY	0x080f
struct hci_cp_write_def_link_policy  __packed;
#define HCI_OP_SNIFF_SUBRATE		0x0811
struct hci_cp_sniff_subrate  __packed;
#define HCI_OP_SET_EVENT_MASK		0x0c01
struct hci_cp_set_event_mask  __packed;
#define HCI_OP_RESET			0x0c03
#define HCI_OP_SET_EVENT_FLT		0x0c05
struct hci_cp_set_event_flt  __packed;
#define HCI_FLT_CLEAR_ALL	0x00
#define HCI_FLT_INQ_RESULT	0x01
#define HCI_FLT_CONN_SETUP	0x02
#define HCI_CONN_SETUP_ALLOW_ALL	0x00
#define HCI_CONN_SETUP_ALLOW_CLASS	0x01
#define HCI_CONN_SETUP_ALLOW_BDADDR	0x02
#define HCI_CONN_SETUP_AUTO_OFF	0x01
#define HCI_CONN_SETUP_AUTO_ON	0x02
#define HCI_OP_DELETE_STORED_LINK_KEY	0x0c12
struct hci_cp_delete_stored_link_key  __packed;
#define HCI_MAX_NAME_LENGTH		248
#define HCI_OP_WRITE_LOCAL_NAME		0x0c13
struct hci_cp_write_local_name  __packed;
#define HCI_OP_READ_LOCAL_NAME		0x0c14
struct hci_rp_read_local_name  __packed;
#define HCI_OP_WRITE_CA_TIMEOUT		0x0c16
#define HCI_OP_WRITE_PG_TIMEOUT		0x0c18
#define HCI_OP_WRITE_SCAN_ENABLE	0x0c1a
#define SCAN_DISABLED		0x00
#define SCAN_INQUIRY		0x01
#define SCAN_PAGE		0x02
#define HCI_OP_READ_AUTH_ENABLE		0x0c1f
#define HCI_OP_WRITE_AUTH_ENABLE	0x0c20
#define AUTH_DISABLED		0x00
#define AUTH_ENABLED		0x01
#define HCI_OP_READ_ENCRYPT_MODE	0x0c21
#define HCI_OP_WRITE_ENCRYPT_MODE	0x0c22
#define ENCRYPT_DISABLED	0x00
#define ENCRYPT_P2P		0x01
#define ENCRYPT_BOTH		0x02
#define HCI_OP_READ_CLASS_OF_DEV	0x0c23
struct hci_rp_read_class_of_dev  __packed;
#define HCI_OP_WRITE_CLASS_OF_DEV	0x0c24
struct hci_cp_write_class_of_dev  __packed;
#define HCI_OP_READ_VOICE_SETTING	0x0c25
struct hci_rp_read_voice_setting  __packed;
#define HCI_OP_WRITE_VOICE_SETTING	0x0c26
struct hci_cp_write_voice_setting  __packed;
#define HCI_OP_HOST_BUFFER_SIZE		0x0c33
struct hci_cp_host_buffer_size  __packed;
#define HCI_OP_WRITE_INQUIRY_MODE	0x0c45
#define HCI_MAX_EIR_LENGTH		240
#define HCI_OP_WRITE_EIR		0x0c52
struct hci_cp_write_eir  __packed;
#define HCI_OP_READ_SSP_MODE		0x0c55
struct hci_rp_read_ssp_mode  __packed;
#define HCI_OP_WRITE_SSP_MODE		0x0c56
struct hci_cp_write_ssp_mode  __packed;
#define HCI_OP_READ_LOCAL_OOB_DATA		0x0c57
struct hci_rp_read_local_oob_data  __packed;
#define HCI_OP_READ_INQ_RSP_TX_POWER	0x0c58
#define HCI_OP_READ_LOCAL_VERSION	0x1001
struct hci_rp_read_local_version  __packed;
#define HCI_OP_READ_LOCAL_COMMANDS	0x1002
struct hci_rp_read_local_commands  __packed;
#define HCI_OP_READ_LOCAL_FEATURES	0x1003
struct hci_rp_read_local_features  __packed;
#define HCI_OP_READ_LOCAL_EXT_FEATURES	0x1004
struct hci_rp_read_local_ext_features  __packed;
#define HCI_OP_READ_BUFFER_SIZE		0x1005
struct hci_rp_read_buffer_size  __packed;
#define HCI_OP_READ_BD_ADDR		0x1009
struct hci_rp_read_bd_addr  __packed;
#define HCI_OP_LE_SET_EVENT_MASK	0x2001
struct hci_cp_le_set_event_mask  __packed;
#define HCI_OP_LE_READ_BUFFER_SIZE	0x2002
struct hci_rp_le_read_buffer_size  __packed;
#define HCI_OP_LE_CREATE_CONN		0x200d
struct hci_cp_le_create_conn  __packed;
#define HCI_OP_LE_CREATE_CONN_CANCEL	0x200e
#define HCI_OP_LE_CONN_UPDATE		0x2013
struct hci_cp_le_conn_update  __packed;
#define HCI_EV_INQUIRY_COMPLETE		0x01
#define HCI_EV_INQUIRY_RESULT		0x02
struct inquiry_info  __packed;
#define HCI_EV_CONN_COMPLETE		0x03
struct hci_ev_conn_complete  __packed;
#define HCI_EV_CONN_REQUEST		0x04
struct hci_ev_conn_request  __packed;
#define HCI_EV_DISCONN_COMPLETE		0x05
struct hci_ev_disconn_complete  __packed;
#define HCI_EV_AUTH_COMPLETE		0x06
struct hci_ev_auth_complete  __packed;
#define HCI_EV_REMOTE_NAME		0x07
struct hci_ev_remote_name  __packed;
#define HCI_EV_ENCRYPT_CHANGE		0x08
struct hci_ev_encrypt_change  __packed;
#define HCI_EV_CHANGE_LINK_KEY_COMPLETE	0x09
struct hci_ev_change_link_key_complete  __packed;
#define HCI_EV_REMOTE_FEATURES		0x0b
struct hci_ev_remote_features  __packed;
#define HCI_EV_REMOTE_VERSION		0x0c
struct hci_ev_remote_version  __packed;
#define HCI_EV_QOS_SETUP_COMPLETE	0x0d
struct hci_qos  __packed;
struct hci_ev_qos_setup_complete  __packed;
#define HCI_EV_CMD_COMPLETE		0x0e
struct hci_ev_cmd_complete  __packed;
#define HCI_EV_CMD_STATUS		0x0f
struct hci_ev_cmd_status  __packed;
#define HCI_EV_ROLE_CHANGE		0x12
struct hci_ev_role_change  __packed;
#define HCI_EV_NUM_COMP_PKTS		0x13
struct hci_ev_num_comp_pkts  __packed;
#define HCI_EV_MODE_CHANGE		0x14
struct hci_ev_mode_change  __packed;
#define HCI_EV_PIN_CODE_REQ		0x16
struct hci_ev_pin_code_req  __packed;
#define HCI_EV_LINK_KEY_REQ		0x17
struct hci_ev_link_key_req  __packed;
#define HCI_EV_LINK_KEY_NOTIFY		0x18
struct hci_ev_link_key_notify  __packed;
#define HCI_EV_CLOCK_OFFSET		0x1c
struct hci_ev_clock_offset  __packed;
#define HCI_EV_PKT_TYPE_CHANGE		0x1d
struct hci_ev_pkt_type_change  __packed;
#define HCI_EV_PSCAN_REP_MODE		0x20
struct hci_ev_pscan_rep_mode  __packed;
#define HCI_EV_INQUIRY_RESULT_WITH_RSSI	0x22
struct inquiry_info_with_rssi  __packed;
struct inquiry_info_with_rssi_and_pscan_mode  __packed;
#define HCI_EV_REMOTE_EXT_FEATURES	0x23
struct hci_ev_remote_ext_features  __packed;
#define HCI_EV_SYNC_CONN_COMPLETE	0x2c
struct hci_ev_sync_conn_complete  __packed;
#define HCI_EV_SYNC_CONN_CHANGED	0x2d
struct hci_ev_sync_conn_changed  __packed;
#define HCI_EV_SNIFF_SUBRATE		0x2e
struct hci_ev_sniff_subrate  __packed;
#define HCI_EV_EXTENDED_INQUIRY_RESULT	0x2f
struct extended_inquiry_info  __packed;
#define HCI_EV_IO_CAPA_REQUEST		0x31
struct hci_ev_io_capa_request  __packed;
#define HCI_EV_IO_CAPA_REPLY		0x32
struct hci_ev_io_capa_reply  __packed;
#define HCI_EV_USER_CONFIRM_REQUEST	0x33
struct hci_ev_user_confirm_req  __packed;
#define HCI_EV_REMOTE_OOB_DATA_REQUEST	0x35
struct hci_ev_remote_oob_data_request  __packed;
#define HCI_EV_SIMPLE_PAIR_COMPLETE	0x36
struct hci_ev_simple_pair_complete  __packed;
#define HCI_EV_REMOTE_HOST_FEATURES	0x3d
struct hci_ev_remote_host_features  __packed;
#define HCI_EV_LE_META			0x3e
struct hci_ev_le_meta  __packed;
#define HCI_EV_LE_CONN_COMPLETE		0x01
struct hci_ev_le_conn_complete  __packed;
#define HCI_EV_STACK_INTERNAL	0xfd
struct hci_ev_stack_internal  __packed;
#define HCI_EV_SI_DEVICE	0x01
struct hci_ev_si_device  __packed;
#define HCI_EV_SI_SECURITY	0x02
struct hci_ev_si_security  __packed;
#define HCI_COMMAND_HDR_SIZE 3
#define HCI_EVENT_HDR_SIZE   2
#define HCI_ACL_HDR_SIZE     4
#define HCI_SCO_HDR_SIZE     3
struct hci_command_hdr  __packed;
struct hci_event_hdr  __packed;
struct hci_acl_hdr  __packed;
struct hci_sco_hdr  __packed;
static inline struct hci_event_hdr *hci_event_hdr(const struct sk_buff *skb)
static inline struct hci_acl_hdr *hci_acl_hdr(const struct sk_buff *skb)
static inline struct hci_sco_hdr *hci_sco_hdr(const struct sk_buff *skb)
#define hci_opcode_pack(ogf, ocf)	(__u16) ((ocf & 0x03ff)|(ogf << 10))
#define hci_opcode_ogf(op)		(op >> 10)
#define hci_opcode_ocf(op)		(op & 0x03ff)
#define hci_handle_pack(h, f)	(__u16) ((h & 0x0fff)|(f << 12))
#define hci_handle(h)		(h & 0x0fff)
#define hci_flags(h)		(h >> 12)
#define HCI_DATA_DIR	1
#define HCI_FILTER	2
#define HCI_TIME_STAMP	3
#define HCI_CMSG_DIR	0x0001
#define HCI_CMSG_TSTAMP	0x0002
struct sockaddr_hci ;
#define HCI_DEV_NONE	0xffff
#define HCI_CHANNEL_RAW		0
#define HCI_CHANNEL_CONTROL	1
struct hci_filter ;
struct hci_ufilter ;
#define HCI_FLT_TYPE_BITS	31
#define HCI_FLT_EVENT_BITS	63
#define HCI_FLT_OGF_BITS	63
#define HCI_FLT_OCF_BITS	127
struct hci_dev_stats ;
struct hci_dev_info ;
struct hci_conn_info ;
struct hci_dev_req ;
struct hci_dev_list_req ;
struct hci_conn_list_req ;
struct hci_conn_info_req ;
struct hci_auth_info_req ;
struct hci_inquiry_req ;
#define IREQ_CACHE_FLUSH 0x0001
